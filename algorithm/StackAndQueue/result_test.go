/*
 * Copyright (C) 2020 Baidu, Inc. All Rights Reserved.
 */
package StackAndQueue

import (
	"bytes"
	"crypto/cipher"
	"crypto/des"
	"fmt"
	"testing"
)

func TestTestReverse(t *testing.T) {
	//TestReverse()
	//t.Log(time.Now().Format("20060102150405"))
	//TestSortStackByStack()
	TestGetMaxWindow()
}

func TestTestDES(t *testing.T) {
	fmt.Println("---------------DES加解密----------------------")
	key := []byte("x2dkE4BY")
	src := "B66AC5BD1AF02A9D50AC3670186EE80450A20461F508A141B0A3912619A8A39E9BAA019D1CAE4D3B2C9DFBB51483D92D01F762371FCE0638F9599BFD4AAEDCCCBBD2061C033D810365D354C69EB36E4B716219D83DA63BAEAA3993CE921006B706A7107BA2A9FBBFE66E1656FD77AD48E21478C8624F4134B68BF5FEADC2BD4714ABA4082EBA19EF49FEC1A651C8BB258BE1EEA8D9F4B6BF25682F5F9324B543C7165AF3BBB51421B11802C68AA7ED4118BA9758C453CB4EF58B746FA32C89B906B86448CCA7081B5882DD759F26C04D0E447C5CAE4D4BE554D58AF0D47CB06FEF0CB2879C548710EED32BBFB607C0A0940E5D9F32FB65315EBDE2D6FD0D6311743899B32CBE9089C9B0D61B34A34659719FBB95712A1E71A0EAE6404EF95097B6EB5194BDADB6A4010433406177BD9665C702558699E932ED4F5F108074741E9FC053E6ED2579EAB0891EFB25B68B6B0F80856A6C2F0C5893E5621559B100986479D226E42D0A67A41F5C3AE61B8E5C5F86EDD3D622D0279FEC6F9274B1AF6B5470F451E0AAE8AE4904E873D5E2072AB9573D25B862A4000E75CFD97F8AAE0B034F6E65F223F602DE5584A73D73F732990EC67E3228763EFF3F59D4BC50124A4160B6FAE903585CA45D590D08F5FEE70F0D27DE80812F28B27AFB2A5C2E5A3E84CBD6BD8439082B303841B76EE29F148C6077B979E2C33D0521BC241D3EA78053453B0BB70341D3FF274FCED506D528A291CFA0613DB81DCB707FB2331C4907C2E30169ACCAAD73F0127CF2C17371B593E37B9960AC52E6CC25CAE0306E09ECC53237AAD7EED165A6303122E67F4516F9E2E555F24D3A43CA11EA82848EA967FBB237472065CF01CE6BC11395EB1EF99F1A09734883329687A495D7292A3BDD794F8ADA1E9BCA617E54C96079CDAD050F4CD952A30B79F14ABEEBDBD4B725102A0D2FCB32C020E30DD19DC4FA1AD21EA4BFBC651F1E3FA010072DE45016B93EC32EED236D6FBDA0C060032BD31FD47027AE8C4BB8D95FE40A441E2DDC7A1C001FFF659A810FAD71CDBDCE31D07AD382A87A06BD213211BA06CD311046AF2D7B688FC5A5812221A6BEB31F024A4C09CABC3F74858077A54DDE4B3CE660E075915985057FA4EFC241BC8FF13FA2849F0345C15FF2A6F1CA0D975FF11C8487260CD8D590DA4D7B6E455CD511D75F228021CC3A7776A320FFDBDF1355941628786132C9295AFE27EE53C66D71FD20EDD765FA45BB469398F76EE27E6A926BDDD0B2E1619EDE012D14FE0C1C5D193B9F06A63E7A1BF138EA15E50FACD0B95561E272670DAC4933FB1C3A81FBA06D352AF1E2D31163A84F76C154F801478AE7E805CAA0E227A0C2F7D51FD0085C44B810948C70D023823BEBDC5BA04D87E64FDFEF39BE4E326F01A65D865261ED0F842842A3F763633695791AFCA3F2662E519B23D87990389E0DE8B19AB3CF13F3E9AD2EAC75CB9F55070648DF66F739F70E6988974774F053F5A23082FBDBE019969A2C579785744CF27ADEC7C0F62BD471987D572449D309BA4FE519739F57099D4A270EE195DA11491FA6D369744AA3F1D17BF45DF5EBC405DDBF57E874A4540E52DF70D1069A45E8A90A8671C6159BCFEF1D5FA9F67D02DC4DEB6F80D9FB29C4C32035BEF45FA422F5C319B08F5894EAADE5A00F418D9141220B0A6F8AE07BD4C5C6B7EA173FA1910297E91C3B3CFFC4A9AF2813CD00B4113F45D6DD6967DCEFF4C605B5DF0D2B8CA57D62C0D2B30B763E58D29B82A46D9EAD131530B5749335DFF9189B39721F862DF52AC295234EAC8DF9712980313DCC2C59C85AD9F01239C745DDB3A4CFB46D297E492424FDB03F5F8D3ACFEDE89A9AB6ACCC2B4C9AD580AE67D4BB3419D7DB82B625A97983E5D3A595A127FFB12F206EFE2F00432D24D762F0E54759A6BCC5C69136F97120BB33F77195C3678853F71699D3334BD835C44BD607DC4DE320DDF811C3993C97BAB9867AECFE603D5C5D462E14AA2197D3522886446CFFF76D51C4A86CC87779C112B496F0FC3B0A30E6C6FEC2E3337C83B7E71EB5711602A49A1581C61EB853694FAF7BBB905EB9E0B8EFF82EBD7231ED41A362C4EE397946B19F70736CE8D0F83570BC2842BE5E67CF5F32F6F1F20877192919BB0912D596C6E9EE978AF9FACE82F563A8063B347FF7DB0AF95040B7E342EE46EDF671BFC3A4D51D16FFD323A55C3A8104D73FBABFB925BFEE362DDC9C819BA9BAE5792CA324E60709DAC084A616939259A8A0CBEBF51E75BA"
	src = string(DecrptogDES([]byte(src), key))
	fmt.Println("解密之后的数据为：", src)
}

//填充字符串（末尾）
func PaddingText(str []byte, blockSize int) []byte {
	//需要填充的数据长度
	paddingCount := blockSize - len(str)%blockSize
	//填充数据为：paddingCount ,填充的值为：paddingCount
	paddingStr := bytes.Repeat([]byte{byte(paddingCount)}, paddingCount)
	newPaddingStr := append(str, paddingStr...)
	//fmt.Println(newPaddingStr)
	return newPaddingStr
}

//去掉字符（末尾）
func UnPaddingText(str []byte) []byte {
	n := len(str)
	count := int(str[n-1])
	newPaddingText := str[:n-count]
	return newPaddingText
}

//---------------DES加密  解密--------------------
func EncyptogDES(src, key []byte) []byte {
	//1、创建并返回一个使用DES算法的cipher.Block接口
	block, _ := des.NewCipher(key)
	//2、对数据进行填充
	src1 := PaddingText(src, block.BlockSize())

	//3.创建一个密码分组为链接模式，底层使用des加密的blockmode接口
	iv := []byte("x2dkE4BY")
	blockMode := cipher.NewCBCEncrypter(block, iv)
	//4加密连续的数据块
	desc := make([]byte, len(src1))
	blockMode.CryptBlocks(desc, src1)
	return desc
}
func DecrptogDES(src, key []byte) []byte {
	//创建一个block的接口
	block, _ := des.NewCipher(key)
	iv := []byte("x2dkE4BY")
	//链接模式，创建blockMode接口
	blockeMode := cipher.NewCBCDecrypter(block, iv)
	//解密
	blockeMode.CryptBlocks(src, src)
	//去掉填充
	newText := UnPaddingText(src)
	return newText
}
